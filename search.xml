<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>我就是试试嘛</title>
      <link href="/2018/09/12/just-try/"/>
      <url>/2018/09/12/just-try/</url>
      <content type="html"><![CDATA[<p> 我就是试试嘛，这里是摘要</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>这里是正文！</p>]]></content>
      
      <categories>
          
          <category> NLP </category>
          
          <category> 二级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Github和Coding双线绑定自定义域名</title>
      <link href="/2018/07/29/Github-and-Coding-bulid-blog/"/>
      <url>/2018/07/29/Github-and-Coding-bulid-blog/</url>
      <content type="html"><![CDATA[<p>本来博客已经搭建好了，可是总觉得用Github一个二级域名怪怪的，非要折腾自己来绑定自己的域名，并申请SSL（就是喜欢看那个小绿锁！）前前后后花了不少时间，走了不少弯路，将踩过的坑记录下来。</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="域名设计原则"><a href="#域名设计原则" class="headerlink" title="域名设计原则"></a>域名设计原则</h3><p>域名的设置应该根据什么原则呢？参考<a href="http://www.nuobg.com/reed/439.html" target="_blank" rel="noopener">域名价值评估</a>，我们可以根据如下因素来</p><p><strong>域名的长短</strong>:1位：10万，2位：5万，3位：1万，4位：5000，5位以上1000，6位以上500<br><strong>域名的组成结构</strong>：纯字母的*2，数字与字母杂的*1，中划线/3<br><strong>域名的组合方式</strong>：单词*3，纯数及单词组合*2，拼音及其它*1<br><strong>域名的形式分类</strong>：行业词*3，通用词*2，创单词*1<br><strong>域名的商业价值</strong>：搜索数量：1000以下/3，1000到1万/2，1万到10万*1，10万到100万*2，100万*3，100万以后搜索数量多一个0就*3的倍数，百度以100万，google以300万为参数。<br><strong>域名的后缀</strong>：com结尾的大于net，net结尾的大约cn的，cn结尾的大于<a href="http://com.cn(org、gov排除例外一般不属于商业险域名)，http://com.cn大于其他尾缀域名" target="_blank" rel="noopener">http://com.cn(org、gov排除例外一般不属于商业险域名)，http://com.cn大于其他尾缀域名</a><br><strong>域名的历史记录</strong>：自己衡量。<br><strong>域名记忆性标准</strong>：跟实际生活中某些词汇重叠，跟语言、语音发声重叠适用性较强<br><strong>域名的合法性标准</strong>：域名是否符合法律，是否涉及到知识产品争议方面。<br><strong>域名的潜在商业价值</strong>：域名所涉及的行业规模及互联网的相关性。</p><h3 id="域名服务商选择"><a href="#域名服务商选择" class="headerlink" title="域名服务商选择"></a>域名服务商选择</h3><p>心中构思好了自己的域名后，就可以着手选择一个靠谱的域名购买商。如果懒得备案，那就将我们的目光锁定在国外。<br>参考<a href="https://www.zhihu.com/question/19551906/answer/31986656" target="_blank" rel="noopener">分析域名购买商</a>，<a href="https://www.1deng.me/2017-best-domain-registrars.html" target="_blank" rel="noopener">2018最佳国外域名注册商，不需要备案</a>这两篇文章，我将目光初步锁定在namesilo和namecheap两家口碑较好、服务稳定、价格尚可的服务商身上。</p><p>这里有两个网站来查询你所想好的域名目前的状况，以及价格对比。<br><a href="https://namebeta.com/" target="_blank" rel="noopener">查域名是否被注册（中文站）</a>，<a href="https://www.domcomp.com/" target="_blank" rel="noopener">domcomp——国外多家域名购买网站的价格对比</a><br>如果准备购买，从domcomp内点击对应的域名服务商还有额外的优惠。</p><p>我最终选择的是Namesilo，因为更便宜……口碑也还不错。<a href="https://www.namesilo.com/?rid=cffdf56sr" target="_blank" rel="noopener">namesilo传送门</a> Namesilo还免费提供隐私服务（即不公开域名持有者的信息）。对了， Namesilo 支持支付宝付款。<br>从传送门进去，注册新用户，选好合适的域名后填入下面两个优惠码其中任意一个都可以优惠一美元。（截止日期：2020年12月31日）</p><div class="note success"><p>NameSilo 新用户购物优惠码一 <span id="inline-blue">imbowei</span>     NameSilo 新用户购物优惠码二 <span id="inline-blue">miaomiao</span>  </p></div><h3 id="域名购买及配置"><a href="#域名购买及配置" class="headerlink" title="域名购买及配置"></a>域名购买及配置</h3><p>namesilo购买域名之前记得填写优惠码，并且提交（提交按钮一直都是灰色的！），提交后可以便宜一美元。<br><img src="https://i.loli.net/2018/07/29/5b5dd61453e66.png" alt="namesilo购买域名"><br>经过以上步骤，就可以最终购买域名了。</p><p>购买得到域名，要紧接着配置。新域名默认有四条停靠的广告记录，不要犹豫，直接全部删除！<br><img src="https://i.loli.net/2018/07/30/5b5e66fe8bec0.png" alt="Namesilo需要删除的默认配置"><br>然后我选用了<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a>的域名解析服务。中文网站，简单易懂。它有两个默认的解析记录，我们直接添加到<code>namesilo</code>购买的域名中，如下图所示。（注意：不需要第三条记录。）<br>这样就可以放心关闭Namesilo的网站了。<br><img src="https://i.loli.net/2018/07/29/5b5dd74a5f2e6.png" alt="namesilo第三方服务器设置"></p><h3 id="Coding配置"><a href="#Coding配置" class="headerlink" title="Coding配置"></a>Coding配置</h3><p>如果Coding和GitHub的用户名和注册邮箱完全一样，就不用再次配置Git，只要找到<code>.ssh</code>文件夹下对应的<code>id_ras.pub</code>文件，再去coding以相同的方式设置一次公钥即可。</p><p>如果用户名或者注册邮箱并不是完全一致，那么按照如下步骤在进行一遍配置。<br>注意，需要先将配置GitHub时候生成的公钥密钥文件备份，或者生成Coding配置的时候改掉生成的文件名。</p><ul><li><code>git config --global user.name &quot;OnlyChristmas&quot;</code> 设置Coding用户名</li><li><code>git config --global user.email &quot;OnlyChristmas@hh.com&quot;</code>设置注册Coding邮箱</li><li><code>ssh-keygen -t rsa &quot;OnlyChristmas@hh.com&quot;</code> 在bash中执行命令，连着三个回车（不需要密码）。</li><li>生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。生成文件目录`C:/用户/你的用户名/</li></ul><p>输入 <code>ssh -T git@coding.net</code> 如果出现如下字样不要慌张，因为可能是本地网络禁止了22端口，我们换个端口就好。</p><blockquote><p>ssh: connect to host coding.net port 22: Connection refused</p></blockquote><p>再次输入 <code>ssh -T -p 443 git@git-ssh.coding.net</code> 出现如下字样，说明配置coding成功。</p><blockquote><p>The authenticity of host …………………<br>Coding 提示: Hello OnlyChristmas, You’ve connected to Coding.net via SSH. This is a personal key.<br>OnlyChristmas，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</p></blockquote><h3 id="将博客托管到Coding和GitHub"><a href="#将博客托管到Coding和GitHub" class="headerlink" title="将博客托管到Coding和GitHub"></a>将博客托管到Coding和GitHub</h3><p>首先，在本地<code>博客根目录/source/</code>下建立一个名为 <code>CNAME</code>的文件，里面写填入你购买的域名。例如<a href="imbowei.com">imbowei.com</a>, 不需要任何的其他字符，例如“www”,”https”之类。</p><p>在本地博客文件夹下的srouce文件夹下新建<span id="inline-green">Staticfile</span>文件，接下来就可以同时向coding和GitHub上传博客了。</p><p>向coding提交代码遇到了如下问题怎么办？</p><blockquote><p>remote: Coding 提示: Authentication failed! 认证失败，请确认您输入了正确的账号密码</p></blockquote><p>我是因为配置出现了问题，改成如下样式，即可同时上传github和coding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https://github.com/OnlyChristmas/OnlyChristmas.github.io.git</span><br><span class="line">    coding: git@git.coding.net:OnlyChristmas/OnlyChristmas.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>代码上传之后，在coding项目的<code>代码/pages 服务</code>中选取master分支，开启静态pages服务，即可访问coding的<a href="https://onlychristmas.coding.me" target="_blank" rel="noopener">主页</a>了。</p><h3 id="Github-and-Coding-双线部署并申请SSL"><a href="#Github-and-Coding-双线部署并申请SSL" class="headerlink" title="Github and Coding 双线部署并申请SSL"></a>Github and Coding 双线部署并申请SSL</h3><p>现在Coding pages和Github pages 已经都可以使用了。<br>那么我们现在要做的就是设置他们同时解析到我们刚才购买的域名<a href="imbowei.com">imbowei.com</a>，实现双线访问。<br>这里的坑比较多。<br>首先要在DNSpod先设置解析Coding，并且在Coding项目的pages界面申请SSL证书。申请配置如下图所示。<br>否则Let’s Encrypt主机根据域名解析记录验证域名所有权时，会定位到GitHub Page的主机上，导致Let’s EncryptSSL证书申请失败。<br><img src="https://i.loli.net/2018/07/30/5b5e625ebaacc.png" alt="Coding pages SSL 申请成功"></p><p>然后在DNSpod再配置Github pages的解析，并在Github博客项目的设置中绑定主页。</p><p>然而，Github pages 出现了如下的错误信息，</p><blockquote><p>Domain’s DNS record could not be retrieved.<br>不要着急，这是因为github pages的自定义HTTPS请求没有配置成功（2018年5月1日新推出的良心服务），在刚才的DNSpod中添加一条A记录即可,其中IP指向在下面的地址中任选其一即可（一项不行，就换另外一个）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure></p></blockquote><p>Gituhb pages的配置成功界面如下所示。<br><img src="https://i.loli.net/2018/07/30/5b5e62c7adf58.png" alt="Gituhb pages SSL配置成功"><br>最终的DNSpod解析配置如下图所示。<br><img src="https://i.loli.net/2018/07/30/5b5e62ff63ffc.png" alt="DNSpod 配置"></p><h3 id="去除Coding的广告……"><a href="#去除Coding的广告……" class="headerlink" title="去除Coding的广告……"></a>去除Coding的广告……</h3><p>配置好之后很开心，然而发现，Coding会自动给你的博客加一个滞留好几秒钟的跳转页面，感觉非常非常的不好。<br>还好除了升级为它的黄金会员之外还有其他解决方法。</p><p>只要在博客主页为它打一点点广告就好了（要两个工作日才会通过！）……毕竟托管在上面还是很方便的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>对于Next主题来说，在<code>themes/next/layout/_partials/footer.swig</code>的文件末尾加入上述代码就可以把Coding要求的小广告加入到主页的页脚位置。</p><p>但是Coding这种强制要求真的很烦人，一点互联网精神都没有！货比货，感觉Coding距离Github还差几个光年吧。<br>既然打广告，也顺便带上良心的Github吧！</p><h3 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h3><p>现在部署好了HTTPS，那为什么还是没有出现小绿锁？刷新页面出现的小绿锁一闪而过，让我们空欢喜一场！<br>因为网站没有全站HTTPS，也就是说，我们引用了http的资源，要将对应资源全部换成HTTPS才能出现小绿锁。</p><p>怎么知道自己什么还没有换成HTTPS资源？很简单，<code>F12</code>打开调式界面就可以发现警告信息。<br>例如我的站点就是因为加载了一个自定义的鼠标图片，如鼠标图片引用了HTTP的资源，将该段代码注释掉，或者换一个HTTPS的资源连接即可。</p><p>然后，就有心心念的<strong>小绿锁</strong>了！</p><p>另外由于主页地址的改变，我还更新了如下资源配置：</p><ul><li>gitment评论系统的<code>Authorization callback URL</code>主页设置为自定义域名。</li><li>SEO相关设置</li><li>在<span id="inline-blue"> 站点配置文件 </span>中更改默认站点，使得文档末尾的copyright链接生成正确。</li><li>还在阿里云申请了一个为期一年的SSL免费证书，用于一些资源网站的验证使用。</li></ul><!-- 配置结束后，如果能直接访问，那是最好。但是如果有悲催的如下错误发生，也不要慌张。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">无法访问此网站</span><br><span class="line">找不到 imbowei.com 的服务器 IP 地址。</span><br><span class="line">尝试运行 Windows 网络诊断。</span><br><span class="line">DNS_PROBE_FINISHED_NXDOMAIN</span><br></pre></td></tr></table></figure><p>我的电脑除了刚刚购买的域名<a href="imbowei.com">imbowei.com</a>之外，所有网站都可以正常访问！……<br>不要慌，也不要问度娘，老老实实的google一下，<br>只要打开<code>控制面板/网络和Internet/网络连接/</code>，选择你使用的网络，右键-&gt;属性-&gt;IPV4（双击），将DNS服务器改成如下配置</p><p><div class="note success"><p> 首选DNS服务器　8.8.8.8</p><p>备用DNS服务器　8.8.4.4 &lt;/p&gt;&lt;/div&gt; —&gt;</p>-->]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github-pages </tag>
            
            <tag> Coding-pages </tag>
            
            <tag> DNSpod </tag>
            
            <tag> SSL </tag>
            
            <tag> Domain </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
